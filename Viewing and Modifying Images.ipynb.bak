{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a href=\"https://datamine.unc.edu/methods_in_medical_informatics_yuchenh/\" ><h1>Back to Notebook List</h3></a>\n",
    "<br/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Welcome to chapter three of Methods in Medical Informatics! In this section, we will be exploring how to view and modify image files. We will be exploring five different scripts which each illustrate  a different aspect of viewing and modifying image files. Lets begin!\n",
    "\n",
    "> Disclaimer: The content below is adapted from the book \"Methods in Medical Informatics - Fundamental of Healthcare Programming in Perl, Python, and Ruby\" by Jules J. Berman. All content is for testing, education, and teaching purposes only. No content will be openly released to the internet. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "# 3.1 Viewing a JPEG Image"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Every programming language should have a method of creating a \"window\" on your monitor, in which you can view images, text, and media. Python contains such an option. By calling upon this option, you can create applications with a sophisticated graphic user interface (GUI). You can also write a script to display images.*\n",
    "\n",
    "> The script will utilized the file [neo1.jpg](https://datamine.unc.edu/datafiles_msortiz/). This is an image file which display a chart for different classifications of cancer (also referred to as neoplasms). Additional information [here](https://datamine.unc.edu/datafiles_msortiz/)\n",
    "\n",
    "**Description adapted from page 37 of \"Methods in Medical Informatics\".*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-10-29T03:24:08.306839Z",
     "start_time": "2020-10-29T03:24:06.706460Z"
    },
    "hidden": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Error: no \"view\" rule for type \"image/png\" passed its test case\n",
      "       (for more information, add \"--debug=1\" on the command line)\n",
      "/usr/bin/xdg-open: 869: www-browser: not found\n",
      "/usr/bin/xdg-open: 869: links2: not found\n",
      "/usr/bin/xdg-open: 869: elinks: not found\n",
      "/usr/bin/xdg-open: 869: links: not found\n",
      "/usr/bin/xdg-open: 869: lynx: not found\n",
      "/usr/bin/xdg-open: 869: w3m: not found\n",
      "xdg-open: no method available for opening '/tmp/tmpihoqxso5.PNG'\n"
     ]
    }
   ],
   "source": [
    "from PIL import Image\n",
    "im=Image.open('./K11946_Files/neo1.jpg')\n",
    "im.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "## Script Algorithm: Viewing and Modifying Images"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Call the image Python image module*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "from PIL import Image"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Create an image object by opening the image file path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "im=Image.open('./K11946_Files/neo1.jpg')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Display the image object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Error: no \"view\" rule for type \"image/png\" passed its test case\n",
      "       (for more information, add \"--debug=1\" on the command line)\n",
      "/usr/bin/xdg-open: 869: www-browser: not found\n",
      "/usr/bin/xdg-open: 869: links2: not found\n",
      "/usr/bin/xdg-open: 869: elinks: not found\n",
      "/usr/bin/xdg-open: 869: links: not found\n",
      "/usr/bin/xdg-open: 869: lynx: not found\n",
      "/usr/bin/xdg-open: 869: w3m: not found\n",
      "xdg-open: no method available for opening '/tmp/tmpm1bh3yse.PNG'\n"
     ]
    }
   ],
   "source": [
    "im.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**This section is adapted from section 3.1.1, \"Script Algorithm\", of page 38 from \"Methods in Medical Informatics\".*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "## Analysis: Viewing and Modifying Images"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "This script produces a window displaying the image. With a few lines of code, you can view any selected image. With this basic functionality, you can build complex graphical user interfaces that display images selected from a list or multiple images.*\n",
    "\n",
    "**This section is adapted from section 3.1.2, \"Analysis\", of pages 39 in \"Methods in Medical Informatics\".*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "# 3.2 Converting between Image Formats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Most people choose one image format that they use consistently for the bulk of their work. Often, this will be the format that best displays the kinds of images they create or capture int heir projects. Those who use images containing texture, lighting variations, and many small detailed objects may prefer JPEG files. Those who create line drawing and schematics may prefer GIF or PNG. Those who combine publication-quality pages, mixing images, and text may prefer PDF. Rather than learn new tricks,k it is often easiest to convert images to your preferred format. The script below will demonstrate this process.*\n",
    "\n",
    "> The script will utilized the file [neo1.jpg](https://datamine.unc.edu/datafiles_msortiz/). This is an image file which display a chart for different classifications of cancer (also referred to as neoplasms). Additional information [here](https://datamine.unc.edu/datafiles_msortiz/)\n",
    "\n",
    "**Description adapted from page 40 of \"Methods in Medical Informatics\".*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-10-29T02:09:27.320463Z",
     "start_time": "2020-10-29T02:09:27.183671Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "from PIL import Image\n",
    "im = Image.open('./K11946_Files/neo1.jpg')\n",
    "im.save('./K11946_Files/neo1.gif')\n",
    "im.save('./K11946_Files/neo1.png')\n",
    "im.save('./K11946_Files/neo1.pdf')\n",
    "print('Images Saved')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Go to: https://datamine.unc.edu:8000/user/onyen/tree/Methods-in-Medical-Informatics, and you will see the files (neo1.gif, neo1.png, neo1.pdf) there. Change \"onyen\" of the URL to your own onyen.  \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "## Script Algorithm: Converting between Image Formats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Call image library*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "from PIL import Image"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Open image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "im = Image.open('./K11946_Files/neo1.jpg')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Save image in alternate format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "im.save('neo1.gif')\n",
    "im.save('neo1.png')\n",
    "im.save('neo1.pdf')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**This section is adapted from section 3.2.1, \"Script Algorithm\", of page 40 from \"Methods in Medical Informatics\".*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "## Analysis: Converting between Image Formats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Though its easy to convert between different image formats, you should keep in mind that the specifications for the varying image formats are constantly changing. The version produced by Python may not be the version required by your specialized image application. When images are converted between image formats, unexpected modifications in the image may result. It is good practice to always save the image that you start with, making your conversions on a copy of the original image. Be prepared to lose some information, particularly text annotations placed in the header of the image, when the image is converted to another format.*\n",
    "\n",
    "**This section is adapted from section 3.2.2, \"Analysis\", of page 41 in \"Methods in Medical Informatics\".*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "# 3.3 Batch Conversion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "When you write your own image software, you can automate activities that would otherwise require repeated operations, on multiple image files, with off-the-shelf image processing software. For example, you might want to delete, add, or modify annotations for a group of images, or you might want to resize an image collection to conform to specified dimensions. When you have thousands of images, stored in a variety of image formats, it will be impossible to implement global conversion, if you do not know how to batch your operations. Here is an example of a script that converts a batch of images from color to grayscale.*\n",
    "\n",
    "> This script will utilize the directory [rgbfigs](http://datamine.unc.edu/jupyter/edit/Methods-in-Medical-Informatics-master/sample.txt).\n",
    "\n",
    "**Description adapted from page 42 of \"Methods in Medical Informatics\".*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-03T03:33:23.671380Z",
     "start_time": "2020-12-03T03:33:23.657378Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import re\n",
    "os.chdir('/home/yuchenh/Methods-in-Medical-Informatics/')\n",
    "from PIL import Image\n",
    "original_path = os.getcwd()\n",
    "filelist = os.listdir('./K11946_Files/rgbfigs')\n",
    "for file in filelist:\n",
    "    if re.search('.db', file):\n",
    "        continue\n",
    "    filepath = './K11946_Files/rgbfigs/' + file\n",
    "    im = Image.open(filepath).convert('L')\n",
    "    newfile = './K11946_Files/bwfigs/' + file\n",
    "    im.save(newfile)\n",
    "os.chdir(original_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: If you see Permission denied: '/home/onyen/Methods-in-Medical-Informatics/',\n",
    "    Change the \"onyen\" to your onyen. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "## Script Algorithm: Batch Conversion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Import the image module*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "from PIL import Image"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "For this example, the source images are all located in the `rgbfigs` folder. Every file in the subdirectory is an image file. Collect the names of all the images in this directory"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "filelist = os.listdir('./K11946_Files/rgbfigs')\n",
    "print(filelist)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Loop through each image name in the subdirectory. If the image name contains the suffix `.db`, go to the next image name. This step is required because of the exported image modules will insert a file with a `.db` extension into the image subdirectory. This type of file is not an image and cannot be converted to grayscale. The loop will then convert each image to grayscale and then write the image object to a new file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "import os\n",
    "for file in filelist:\n",
    "    if re.search('.db', file):\n",
    "        continue\n",
    "    filepath = './K11946_Files/rgbfigs/' + file\n",
    "    im = Image.open(filepath).convert('L')\n",
    "    newfile = './K11946_Files/bwfigs/' + file\n",
    "    im.save(newfile)\n",
    "os.chdir(original_path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**This section is adapted from section 3.3.1, \"Script Algorithm\", of page 42 from \"Methods in Medical Informatics\".*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "## Analysis: Batch Conversion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "This script produces grayscale versions of all the images in the `rgbfigs` subdirectory.  Conversion from color to grayscale is somewhat slow. If you have hundreds of images, the script may take longer to execute. In this example, we chose a simple function, grayscale conversion. There are hundred of functions we could have utilized to perform different conversions on every image.*\n",
    "\n",
    "**This section is adapted from section 3.3.2, \"Analysis\", of page 43 from \"Methods in Medical Informatics\".*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "# 3.4 Drawing a Graph from List Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "One of the simplest and most useful ways of visualizing list data is the bar graph. The task of converting data lists into bar graphs is so common that most spreadsheet applications, and some word processing applications, will build graphs from data. Nonetheless, serious informaticians should know how to build a bar graph from their own data sources. When you write your own scripts for building graphs, you have the flexibility to automate and modify the process of graph creation. You can build graphs from very large data arrays or from data abstracted form multiple, diverse data sets, and you can create hundreds or thousands of graphs, virtually instantaneously, from multiple data arrays. You can write scripts that build graphs and export the graphs into Web pages. All of these efforts begin with the simple technique of converting a list of \n",
    "numbers into a bar graph.*\n",
    "\n",
    "> The script will utilized the file [neo1.jpg](https://datamine.unc.edu/datafiles_msortiz/). This is an image file with an empty square. Additional information [here](https://datamine.unc.edu/datafiles_msortiz/)\n",
    "\n",
    "**Description adapted from page 44 of \"Methods in Medical Informatics\".*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-03T03:33:07.891237Z",
     "start_time": "2020-12-03T03:33:07.849729Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "from PIL import Image, ImageDraw\n",
    "im = Image.open('./K11946_Files/empty.gif')\n",
    "draw = ImageDraw.Draw(im)\n",
    "data_string = '1 1 1 3 4 9 27 45 89 89 32 51 69 92 11 11 80 43'\n",
    "data_array = data_string.split(' ')\n",
    "x_coord = 20\n",
    "for i in data_array:\n",
    "    x_coord = x_coord + 25\n",
    "    y_coord = 300 - int(i)\n",
    "    draw.line((x_coord,300) + (x_coord, y_coord), width=4, fill=000) \n",
    "im.save('./K11946_Files/empty1.jpg')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "## Script Algorithm: Drawing a Graph from List Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Import an image library*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "from PIL import Image, ImageDraw"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Open or create a blanks image object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "im = Image.open('./K11946_Files/empty.gif')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Split the input data list into an array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "draw = ImageDraw.Draw(im)\n",
    "data_string = '1 1 1 3 4 9 27 45 89 89 32 51 69 92 11 11 80 43'\n",
    "data_array = data_string.split(' ')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Use each array item as a “height” quantity to be added to the baseline y-coordinate for the graph, and increment each x-coordinate by some predetermined\n",
    "number for each successive array item. Then use the image library's draw method to add lines to your image. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "x_coord = 20\n",
    "for i in data_array:\n",
    "    x_coord = x_coord + 25\n",
    "    y_coord = 300 - int(i)\n",
    "    draw.line((x_coord,300) + (x_coord, y_coord), width=4, fill=000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**This section is adapted from section 3.4.1, \"Script Algorithm\", of page 44 from \"Methods in Medical Informatics\".*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "## Analysis: Drawing a Graph from List Data"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "The script produces an image, containing a simplg graph, without designated coordinates, for the provided list data.*\n",
    "\n",
    "![image.png](attachment:image.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**This section is adapted from section 3.4.2, \"Analysis\", of page 46 from \"Methods in Medical Informatics\".*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "# 3.5 Drawing an Image Mashup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "A mashup is a computational trick that uses complex data from one or more sources and displays the data in a new context, often employing images to create a simplified representation of data or concepts. Web-based mashups use the power of the web to draw information from multiple sources to produce dynamic services. Simple mashups, such as the ones that we will create here, take information from one or more dataset files and present the aggregated information in charts or images.*\n",
    "\n",
    "> This script will utilize the text file [loc_states.txt](http://datamine.unc.edu/jupyter/edit/Methods-in-Medical-Informatics-master/mim2gene.txt). This is a text file that details the longitude and latitude for the geographic centers of all 50 states. Additional information [here](https://datamine.unc.edu/datafiles_msortiz/)\n",
    "\n",
    "**Description adapted from page 46 of \"Methods in Medical Informatics\".*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-10-29T03:27:53.720215Z",
     "start_time": "2020-10-29T03:27:53.354758Z"
    },
    "hidden": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "from PIL import Image, ImageDraw\n",
    "import re\n",
    "lathash = {}\n",
    "lonhash = {}\n",
    "north = 49\n",
    "south = 25\n",
    "west = 125\n",
    "east = 66\n",
    "infile = open('./K11946_Files/loc_states.txt', 'r')\n",
    "for line in infile:\n",
    "    match_tuple = re.match(r'^([A-Z]{2})\\,([0-9\\.]+)\\,\\-?([\\.0-9]+)*$',line)\n",
    "    state = match_tuple.group(1)\n",
    "    latitude = float(match_tuple.group(2))\n",
    "    longitude = float(match_tuple.group(3))\n",
    "    lathash[state] = latitude\n",
    "    lonhash[state] = longitude\n",
    "im = Image.open('./K11946_Files/us.jpg')\n",
    "print(im.mode)\n",
    "[width, height] = im.size\n",
    "draw = ImageDraw.Draw(im)\n",
    "for state, latitude in lathash.items():\n",
    "    longitude = lonhash[state]\n",
    "    offset_y = int(((north - latitude) / (north - south)) * height)\n",
    "    offset_x = int(((west - longitude) / (west - east)) * width)\n",
    "    print(offset_x, offset_y)\n",
    "    draw.ellipse((offset_x, offset_y, (offset_x + 10), (offset_y + 10)), outline=0xff0000, fill=0x0000ff)\n",
    "    im.save('./K11946_Files/us_out.jpg')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "## Script Algorithm: Drawing an Image Mashup"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Import an image module into your script*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "from PIL import Image, ImageDraw\n",
    "import re"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Determine the northern and southern latitudes, and the eastern and western longitudes that mark the perimeter of the United States"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "lathash = {}\n",
    "lonhash = {}\n",
    "north = 49\n",
    "south = 25\n",
    "west = 125\n",
    "east = 66"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Open th external file `loc_states.txt`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "infile = open('./K11946_Files/loc_states.txt', 'r')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Create two dictionary objects. In both, the two-letter state codes are the keys. In one, the values are the latitude locations of the states. In the other, the values are the longitude locations of the states."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "for line in infile:\n",
    "    match_tuple = re.match(r'^([A-Z]{2})\\,([0-9\\.]+)\\,\\-?([\\.0-9]+)*$',line)\n",
    "    state = match_tuple.group(1)\n",
    "    latitude = float(match_tuple.group(2))\n",
    "    longitude = float(match_tuple.group(3))\n",
    "    lathash[state] = latitude\n",
    "    lonhash[state] = longitude"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Open an image file consisting of the map of the United States"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-10-29T04:05:50.217889Z",
     "start_time": "2020-10-29T04:05:50.208394Z"
    },
    "hidden": true
   },
   "outputs": [],
   "source": [
    "im = Image.open('./K11946_Files/us.jpg')\n",
    "print(im.mode)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Determine the number of rows and columns in the map image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "[width, height] = im.size\n",
    "draw = ImageDraw.Draw(im)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "For each state, translate the global coordinate for each state as x,y coordinates on the map image. Draw circles on the map, using the x,y coordinates for each state as the center for each state. Write the resulting image to an external file. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "for state, latitude in lathash.items():\n",
    "    longitude = lonhash[state]\n",
    "    offset_y = int(((north - latitude) / (north - south)) * height)\n",
    "    offset_x = int(((west - longitude) / (west - east)) * width)\n",
    "    print(offset_x, offset_y)\n",
    "    draw.ellipse((offset_x, offset_y, (offset_x + 10), (offset_y + 10)), outline=0xff0000, fill=0x0000ff)\n",
    "    im.save('./K11946_Files/us_out.jpg')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**This section is adapted from section 3.5.1, \"Script Algorithm\", of pages 46-47 from \"Methods in Medical Informatics\".*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "heading_collapsed": true,
    "hidden": true
   },
   "source": [
    "## Analysis: Drawing an Image Mashup"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {
    "hidden": true
   },
   "source": [
    "This output is the U.S. map, without state borders, but with each state marked with a dot, at the location of its latitude and longitude. Techniques whereby data files from one source are combined with maps, charts, or other visual tools are extremely useful. They permit us to examine complex data sources within a simple and familiar visual context.*\n",
    "\n",
    "![image.png](attachment:image.png)\n",
    "\n",
    "**This section is adapted from section 3.5.2, \"Analysis\", of pages 50-51 from \"Methods in Medical Informatics\".*"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
